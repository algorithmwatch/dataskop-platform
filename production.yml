version: "3"

volumes:
  production_postgres_data: {}
  production_traefik: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
      args:
        - GPG_PUBLIC_KEY_URL=${GPG_PUBLIC_KEY_URL}
    image: goliath_production_django
    depends_on:
      - postgres
      - redis
    # using the staging enviroment since we are actually staging with Docker compose
    env_file:
      - ./.envs/.staging/.django
      - ./.envs/.staging/.postgres
    command: /start
    volumes:
      - /var/goliath_backups/:/backups

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: goliath_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
    env_file:
      - ./.envs/.staging/.postgres

  traefik:
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: goliath_production_traefik
    depends_on:
      - django
    volumes:
      - production_traefik:/etc/traefik/acme:z
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
      - "0.0.0.0:5555:5555"

  redis:
    image: redis:5.0

  celeryworker:
    <<: *django
    image: goliath_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: goliath_production_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: goliath_production_flower
    command: /start-flower
